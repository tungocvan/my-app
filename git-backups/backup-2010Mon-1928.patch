diff --git a/src/data/url.js b/src/data/url.js
index ff55bde..53e94c8 100644
--- a/src/data/url.js
+++ b/src/data/url.js
@@ -17,6 +17,7 @@ const URLS = {
   PERMISSIONS: `${BASE_URL}/permissions`,
   PRODUCTS: `${BASE_URL}/products`,
   ORDERS: `${BASE_URL}/orders`,
+  ORDERS_UPDATE: `${BASE_URL}/orders/update-item`,
   VERIFY: `${BASE_URL}/auth/google/verify`,
   // Thêm các url khác ở đây
 };
@@ -34,6 +35,7 @@ export const {
   PERMISSIONS,
   PRODUCTS,
   ORDERS,
+  ORDERS_UPDATE,
   VERIFY,
 } = URLS;
 
diff --git a/src/screens/OrderDetailScreen.js b/src/screens/OrderDetailScreen.js
index fa428b4..7a35693 100644
--- a/src/screens/OrderDetailScreen.js
+++ b/src/screens/OrderDetailScreen.js
@@ -2,29 +2,16 @@
 import { View, Text, FlatList, StyleSheet, TouchableOpacity, Alert } from 'react-native';
 import { Ionicons } from '@expo/vector-icons';
 import { useNavigation } from '@react-navigation/native';
+import axiosClient from '../api/axiosClient'; // axios của bạn
+import { ORDERS_UPDATE } from '../data/url';
 
-const BackButton = ({ color = '#007AFF', size = 24 }) => {
-  const navigation = useNavigation();
-  return (
-    <TouchableOpacity
-      style={{ paddingHorizontal: 10, paddingVertical: 5 }}
-      onPress={() => navigation.goBack()}
-    >
-      <Ionicons name="arrow-back" size={size} color={color} />
-    </TouchableOpacity>
-  );
-};
-
-const OrderDetailScreen = ({ route, navigation }) => {
+const OrderDetailScreen = ({ route }) => {
   const { order } = route.params;
-
-  // Trạng thái cho phép sửa
+  const navigation = useNavigation();
   const isEditable = order.status === 'pending';
-
-  // State quản lý chi tiết sản phẩm
   const [details, setDetails] = useState(order.order_detail);
+  const [loading, setLoading] = useState(false);
 
-  // Cập nhật số lượng
   const updateQuantity = (index, newQty) => {
     if (newQty < 1) return;
     const newDetails = [...details];
@@ -34,104 +21,155 @@ const OrderDetailScreen = ({ route, navigation }) => {
     setDetails(newDetails);
   };
 
-  // Xóa sản phẩm
   const removeItem = (index) => {
-    Alert.alert('Xóa sản phẩm', 'Bạn có chắc chắn muốn xóa sản phẩm này?', [
-      { text: 'Hủy', style: 'cancel' },
-      {
-        text: 'Xóa',
-        style: 'destructive',
-        onPress: () => {
-          const newDetails = [...details];
-          newDetails.splice(index, 1);
-          setDetails(newDetails);
-        },
-      },
-    ]);
+    const newDetails = [...details];
+    newDetails.splice(index, 1);
+    setDetails(newDetails);
+  };
+
+  const handleUpdateOrder = async () => {
+    try {
+      setLoading(true);
+
+      if (details.length === 0) {
+        // Nếu hết sản phẩm → xóa đơn hàng
+        Alert.alert('Xóa đơn hàng', 'Không còn sản phẩm nào, bạn có muốn xóa đơn hàng?', [
+          { text: 'Hủy', style: 'cancel' },
+          {
+            text: 'Xóa',
+            style: 'destructive',
+            onPress: async () => {
+              try {
+                await axiosClient.post(ORDERS_UPDATE, {
+                  order_id: order.id,
+                  order_detail: [], // server sẽ xóa đơn hàng nếu array rỗng
+                  email: order.email,
+                  status: order.status,
+                  total: 0, // gửi 0 để pass validation
+                });
+                Alert.alert('Đã xóa', 'Đơn hàng đã được xóa');
+
+                navigation.goBack();
+              } catch (error) {
+                const msg = error.response?.data?.message || 'Cập nhật thất bại';
+                Alert.alert('Lỗi', msg);
+                console.log('Axios Response Error:', error.response?.data);
+                navigation.goBack();
+              }
+            },
+          },
+        ]);
+        return;
+      }
+
+      // Nếu còn sản phẩm → tính total và cập nhật bình thường
+      const totalAmount = details.reduce((sum, item) => sum + Number(item.total), 0);
+
+      await axiosClient.post(ORDERS_UPDATE, {
+        order_id: order.id,
+        order_detail: details,
+        email: order.email,
+        status: order.status,
+        total: totalAmount,
+      });
+      Alert.alert('Thành công', 'Cập nhật đơn hàng thành công!!!');
+    } catch (error) {
+      const msg = error.response?.data?.message || 'Cập nhật thất bại';
+      Alert.alert('Lỗi', msg);
+      console.log('Axios Response Error:', error.response?.data);
+      navigation.goBack();
+    } finally {
+      setLoading(false);
+    }
   };
 
-  // Tính tổng tiền
   const totalAmount = details.reduce((sum, item) => sum + parseInt(item.total), 0);
 
-  // Render sản phẩm
   const renderDetailItem = ({ item, index }) => (
-    <View style={styles.detailRow}>
-      <Text style={styles.detailTitle}>{item.title}</Text>
-      <Text style={styles.detailQty}>x{item.quantity}</Text>
-      <Text style={styles.detailPrice}>{parseInt(item.total).toLocaleString('vi-VN')} ₫</Text>
-
+    <View style={styles.detailCard}>
+      <View style={{ flex: 1 }}>
+        <Text style={styles.detailTitle}>{item.title}</Text>
+        <Text style={styles.detailQty}>Số lượng: {item.quantity}</Text>
+        <Text style={styles.detailPrice}>{parseInt(item.total).toLocaleString('vi-VN')} ₫</Text>
+      </View>
       {isEditable && (
         <View style={styles.actionRow}>
           <TouchableOpacity onPress={() => updateQuantity(index, item.quantity + 1)}>
-            <Ionicons name="add-circle-outline" size={22} color="#007AFF" />
+            <Ionicons name="add-circle-outline" size={24} color="#007AFF" />
           </TouchableOpacity>
           <TouchableOpacity onPress={() => updateQuantity(index, item.quantity - 1)}>
-            <Ionicons name="remove-circle-outline" size={22} color="#FF9500" />
+            <Ionicons name="remove-circle-outline" size={24} color="#FF9500" />
           </TouchableOpacity>
           <TouchableOpacity onPress={() => removeItem(index)}>
-            <Ionicons name="trash-outline" size={22} color="#FF3B30" />
+            <Ionicons name="trash-outline" size={24} color="#FF3B30" />
           </TouchableOpacity>
         </View>
       )}
     </View>
   );
 
-  // Header navigation custom
-  React.useLayoutEffect(() => {
-    navigation.setOptions({
-      headerLeft: () => <BackButton />,
-      title: `Đơn hàng #${order.id}`,
-    });
-  }, [navigation]);
-
   return (
-    <FlatList
-      ListHeaderComponent={
-        <View style={styles.card}>
-          <View style={styles.orderInfo}>
-            <Text style={styles.label}>Họ và tên:</Text>
-            <Text style={styles.status}>{order.user.name}</Text>
-          </View>
-          <View style={styles.orderInfo}>
-            <Text style={styles.label}>Email:</Text>
-            <Text style={styles.status}>{order.email}</Text>
+    <View style={{ flex: 1 }}>
+      <FlatList
+        ListHeaderComponent={
+          <View style={styles.card}>
+            <Text style={styles.headerTitle}>Thông tin đơn hàng</Text>
+            <View style={styles.orderInfo}>
+              <Text style={styles.label}>Họ và tên:</Text>
+              <Text style={styles.status}>{order.user.name}</Text>
+            </View>
+            <View style={styles.orderInfo}>
+              <Text style={styles.label}>Email:</Text>
+              <Text style={styles.status}>{order.email}</Text>
+            </View>
+            <View style={styles.orderInfo}>
+              <Text style={styles.label}>Trạng thái:</Text>
+              <Text
+                style={[
+                  styles.status,
+                  order.status === 'confirmed' ? styles.statusConfirmed : styles.statusPending,
+                ]}
+              >
+                {order.status === 'confirmed' ? 'Đã xác nhận' : 'Chờ xử lý'}
+              </Text>
+            </View>
+            <View style={styles.orderInfo}>
+              <Text style={styles.label}>Ngày đặt:</Text>
+              <Text style={styles.date}>{new Date(order.created_at).toLocaleString('vi-VN')}</Text>
+            </View>
+            {isEditable && (
+              <TouchableOpacity
+                style={styles.updateBtn}
+                onPress={handleUpdateOrder}
+                disabled={loading}
+              >
+                <Text style={styles.updateText}>
+                  {loading ? 'Đang cập nhật...' : 'Cập nhật đơn hàng'}
+                </Text>
+              </TouchableOpacity>
+            )}
+            <Text style={[styles.detailHeader, { marginTop: 12 }]}>Chi tiết sản phẩm</Text>
           </View>
-          <View style={styles.orderInfo}>
-            <Text style={styles.label}>Trạng thái:</Text>
-            <Text
-              style={[
-                styles.status,
-                order.status === 'confirmed' ? styles.statusConfirmed : styles.statusPending,
-              ]}
-            >
-              {order.status === 'confirmed' ? 'Đã xác nhận' : 'Chờ xử lý'}
-            </Text>
+        }
+        data={details}
+        keyExtractor={(item, index) => index.toString()}
+        renderItem={renderDetailItem}
+        contentContainerStyle={{ padding: 12 }}
+        ListFooterComponent={
+          <View style={styles.totalRow}>
+            <Text style={styles.label}>Tổng cộng:</Text>
+            <Text style={styles.total}>{totalAmount.toLocaleString('vi-VN')} ₫</Text>
           </View>
-
-          <View style={styles.orderInfo}>
-            <Text style={styles.label}>Ngày đặt:</Text>
-            <Text style={styles.date}>{new Date(order.created_at).toLocaleString('vi-VN')}</Text>
-          </View>
-
-          <Text style={[styles.detailHeader, { marginTop: 12 }]}>Chi tiết sản phẩm</Text>
-        </View>
-      }
-      data={details}
-      keyExtractor={(item, index) => index.toString()}
-      renderItem={renderDetailItem}
-      contentContainerStyle={{ padding: 12 }}
-      ListFooterComponent={
-        <View style={styles.totalRow}>
-          <Text style={styles.label}>Tổng cộng:</Text>
-          <Text style={styles.total}>{totalAmount.toLocaleString('vi-VN')} ₫</Text>
-        </View>
-      }
-    />
+        }
+      />
+    </View>
   );
 };
 
 export default OrderDetailScreen;
 
+// --- styles giữ nguyên như trước ---
+
 const styles = StyleSheet.create({
   card: {
     backgroundColor: '#fff',
@@ -140,11 +178,7 @@ const styles = StyleSheet.create({
     marginBottom: 12,
     elevation: 2,
   },
-  email: {
-    color: '#444',
-    fontSize: 14,
-    marginBottom: 6,
-  },
+  headerTitle: { fontSize: 18, fontWeight: '700', marginBottom: 8 },
   orderInfo: {
     flexDirection: 'row',
     justifyContent: 'space-between',
@@ -156,21 +190,23 @@ const styles = StyleSheet.create({
   statusConfirmed: { color: '#34C759' },
   date: { color: '#777' },
   detailHeader: { fontWeight: '600', fontSize: 16, marginBottom: 6 },
-  detailRow: {
+  detailCard: {
     flexDirection: 'row',
     justifyContent: 'space-between',
     alignItems: 'center',
-    paddingVertical: 6,
-    borderBottomWidth: 0.5,
-    borderBottomColor: '#ccc',
+    backgroundColor: '#fefefe',
+    padding: 12,
+    marginBottom: 8,
+    borderRadius: 10,
+    elevation: 1,
   },
-  detailTitle: { flex: 3, color: '#444' },
-  detailQty: { flex: 1, textAlign: 'center', color: '#444' },
-  detailPrice: { flex: 2, textAlign: 'right', fontWeight: '600', color: '#444' },
+  detailTitle: { fontWeight: '600', fontSize: 15, color: '#222' },
+  detailQty: { marginTop: 4, color: '#555' },
+  detailPrice: { marginTop: 4, fontWeight: '700', color: '#000' },
   actionRow: {
     flexDirection: 'row',
-    gap: 3,
-    marginLeft: 6,
+    gap: 6,
+    marginLeft: 10,
   },
   totalRow: {
     flexDirection: 'row',
@@ -182,4 +218,12 @@ const styles = StyleSheet.create({
     borderRadius: 8,
   },
   total: { fontWeight: '700', fontSize: 16 },
+  updateBtn: {
+    marginTop: 12,
+    paddingVertical: 10,
+    backgroundColor: '#007AFF',
+    borderRadius: 8,
+    alignItems: 'center',
+  },
+  updateText: { color: '#fff', fontWeight: '600', fontSize: 16 },
 });
diff --git a/src/screens/OrderScreen.js b/src/screens/OrderScreen.js
index 4d8d092..0999691 100644
--- a/src/screens/OrderScreen.js
+++ b/src/screens/OrderScreen.js
@@ -1,4 +1,4 @@
-﻿import React, { useEffect, useState } from 'react';
+﻿import React, { useState, useCallback } from 'react';
 import {
   View,
   Text,
@@ -8,7 +8,7 @@ import {
   TouchableOpacity,
   TextInput,
 } from 'react-native';
-import { useNavigation } from '@react-navigation/native';
+import { useNavigation, useFocusEffect } from '@react-navigation/native';
 import axios from 'axios';
 import { Ionicons } from '@expo/vector-icons';
 import { ORDERS } from '../data/url';
@@ -42,9 +42,11 @@ const OrderScreen = () => {
     }
   };
 
-  useEffect(() => {
-    fetchOrders();
-  }, []);
+  useFocusEffect(
+    useCallback(() => {
+      fetchOrders();
+    }, []),
+  );
 
   // 🔹 Chuyển dd/mm/yyyy -> Date object
   const parseDate = (dateStr) => {
@@ -112,7 +114,11 @@ const OrderScreen = () => {
   const renderOrderItem = ({ item }) => (
     <TouchableOpacity
       style={styles.card}
-      onPress={() => navigation.navigate('OrderDetailScreen', { order: item })}
+      onPress={() =>
+        navigation.navigate('OrderDetailScreen', {
+          order: item,
+        })
+      }
     >
       <View style={styles.row}>
         <Ionicons name="receipt-outline" size={22} color="#007AFF" />
